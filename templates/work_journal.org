#+STARTUP: indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/css/solarized-dark.min.css" />
#+TITLE: Journal
#+OPTIONS: H:4
#+OPTIONS: toc:2
* Week of September 14
** <2015-09-20 Sun>
*** Grammar studies
**** "The duck is ready to eat" can be translated to Lojban differently
***** If the Duck is consuming food : "lo datka cu bredi lo ka citka" => "the duck is ready to be the eater"
***** If the Duck is being consumed : "lo datka cu bredi lo ka se citka" => "the duck is ready to be the eaten"
***** Best attempt at keeping the ambiguity : "lo datka cu bredi lo nu citka" => "the duck is ready for an event where eating occurs"
****** It should be noted that 'nu' is only used when it is purposely unclear how a gismu (a verb) is related. It's its own type of unambiguity.
****** Gleki is still trying to combine both meanings to create a phrase analogous to the original English.
The fact that it requires the concept of full propositional
abstractions and still hasn't gotten the job done is saying something.
**** Got information
***** Gleki, of the Wave Lessons, talked to me about parsers.
****** TODO Look up Stanfard Parser
****** TODO Look up [[https://github.com/opencog/opencog][OpenCog]].
OpenCog appears to be like the [[http://lac.gmu.edu/projects/disciple/disciple.htm][DISCIPLE]] framework.
** <2015-09-17 Thr>
*** 1st stint of work (1.5 hrs)
**** Riley got back to me
***** Recommended Books:
"Loom of Language"
***** State of Software:
****** English to Lojban
There aren't any, as far as he knows
****** Lojban to English
******* There exist plenty
** <2015-09-16 Wed>
*** 1st stint of work (3 hrs)
**** Software Side
***** [[https://github.com/leeavital/Lojban-Translator][Lojban-Translator]] 
- It feels like a school project. Tried their examples and one throws an exception.
Namely, "do blari'o" is supposed to be "you're blue"
- The flags you can set are not that impressive. --tree simply prints
  the tree generated by the camxes package. -c prints the entire
  hard-coded dictionary, and -g prints the gismu dictionary.
****** pip and the multiple pythons
I broke pip trying to get Lojban-Translator to work. I finally got it
working, since pip has this cool feature where you can call different
pips using their python-version number. For some reason, though, my
pips ended up getting installed to pypy and pypy3... just as well?
***** More on Camxes
I wasn't sure what the morphology method did, until I tried a couple
more words outside of the example.

#+BEGIN_SRC python 
  >>>> print camxes.morphology("coi")  # Hello
  text
   `- CMAVO
       `- COI
           +- c
           |   `- u'c'
           +- o
           |   `- u'o'
           `- i
               `- u'i'
  >>>> print camxes.morphology("co'o") # Bye
  text
   `- CMAVO
       `- COI
           +- c
           |   `- u'c'
           +- o
           |   `- u'o'
           +- h
           |   `- u"'"
           `- o
               `- u'o'
  >>>> print camxes.morphology("rodo") # everyone
  text
   +- CMAVO
   |   `- PA
   |       +- r
   |       |   `- u'r'
   |       `- o
   |           `- u'o'
   `- CMAVO
       `- KOhA
           +- d
           |   `- u'd'
           `- o
               `- u'o'
  >>>> print camxes.morphology("mlatu") # is a cat, to be a cat
  text
   `- BRIVLA
       `- gismu
          +- stressedLongRafsi
           |   +- stressedCCVRafsi
           |   |   +- initialPair
           |   |   |   +- consonant
           |   |   |   |   `- syllabic
           |   |   |   |       `- m
           |   |   |   |           `- u'm'
           |   |   |   `- consonant
           |   |   |       `- syllabic
           |   |   |           `- l
           |   |   |               `- u'l'
           |   |   `- stressedVowel
           |   |       `- vowel
           |   |           `- a
           |   |               `- u'a'
           |   `- consonant
           |       `- unvoiced
           |           `- t
           |               `- u't'
           `- vowel
               `- u
                   `- u'u'
>>>> print camxes.morphology("co'o rodo") # Bye Everyone
text
 +- CMAVO
 |   `- COI
 |       +- c
 |       |   `- u'c'
 |       +- o
 |       |   `- u'o'
 |       +- h
 |       |   `- u"'"
 |       `- o
 |           `- u'o'
 +- spaces
 |   `- initialSpaces
 |       `- spaceChar
 |           `- u' '
 +- CMAVO
 |   `- PA
 |       +- r
 |       |   `- u'r'
 |       `- o
 |           `- u'o'
 `- CMAVO
     `- KOhA
         +- d
         |   `- u'd'
         `- o
             `- u'o'
#+END_SRC
- It's interesting that it classifies the word and breaks it down into morphologic components
- It produces a really indepth mapping of a grammatic structure
****** Implementation Notes:
It runs with Java as a backend. There exists camxes-py and
python-camxes, which are pure python implementations. They're essentially the same.
*** 2nd Stint of Work (1 hr)
**** Library!
***** Checked out Three Books.
P300 is a good place to be for Machine Translation specific stuff.
NLP can be found in QA and Linguistics can be found in P27 on.
***** Talked to a librarian about specialty librarians
***** Read for a while
** <2015-09-15 Tue>
*** Had a meeting with Kauffman at 9 am.
Work hard, work smart, honor the time commitments.
Got a list of things to get done.
*** List of Stuff to Do
**** TODO Send Preliminary Results by <2015-09-21 Mon>
**** DONE Translate "The duck is ready to eat" into two lojban sentences.
***** If the Duck is consuming food
"lo datka cu bredi lo ka citka" => "the duck is ready to be the eater"
***** If the Duck is being consumed
"lo datka cu bredi lo ka se citka" => "the duck is ready to be the eaten"
****** A note on "lo ka (se) citka"
The difference between the two phrases is the last part "lo ka citka"
and "lo ka se citka". One means "the eater" and the other "the eaten".

Here's the breakdown:

In lojban, citka is a gismu (an abstraction for a concept, best
analogous to a verb). To modify the gismu, one can turn it concrete by
placing the "lo" article in front of it.

So far "lo citka" means "the eating", leaving "ka" and "ka se".

"ka" is an abstraction of a property, and can often be translated,
verbosely, as "Having the property of". "lo ka citka" is "Someone has
the property of eating".

"se" has to go into the construction of bridi. bridi is the base
semantic units in lojban, and could be considered how sentences should
be formed. citka as a bridi would be defined as x_1 (the eating) eats
x_2 (the consumed). So, saying something like "I eat the duck" would
be "mi citka lo datka". However, to say something like "I am eaten by
the duck" I might do "mi se citka lo datka". What "se" does is switch
the order of arguments in a bridi, thus se citka is now x_2 (the
consumed) is eaten by x_1. "lo ka se citka" is then "Someone has the
property of being eaten".

These modifier words, or cmavo, serve a great grammatical purpose in
bringing full precision into the language.

**** TODO Produce an overview of the grammar
**** TODO Produce list of tools with quality evals
#+BEGIN_QUOTE
"Dictionaries are useful.\\
Parsers are more useful.\\
Does a Lojban to English translator exist?"
#+END_QUOTE
**** DONE Get NLP/MT background resource 
**** TODO Check out NLTK. See if it's good for Lojban (or too English-centric)
**** TODO Meet with him at 9:30, <2015-09-25 Fri>, preparing the above as demonstration
*** Libraries are good places not to get distracted
*** Things Done (1.0 hrs)
**** Fixed Pip.
Turns out it was a package manager fight. Once I unemerged pip and
reinstalled it using the manual installer, it worked just fine.
**** Installed and played with Camxes.
It's a really useful package. It takes a lojban phrase and then
generates a tree, with parts of speech tagged.

It can also check for grammatical correctness.

*** Kunal got back to me
***** TODO Look into IRSLTM
This is a modeling toolkit by Marcello Federico at FBK and University of Trento in Italy
***** TODO Look into Berkley POS (Parts of Speech) Tagger
***** TODO Look into Tree Tagger
***** TODO Look into shef.mt.tools Java package
***** TODO Go through MT work done by RWTH Aachen
Good enough for a jumping point in learning MT
***** TODO Also look at previous work done by AppTek, prior to eBay acquisition
They specialized in Automated Speech Recognition (ASR) and Machine Translation (MT)
***** TODO Linguistics Textbook: Find Jurafsky and Martin
**** Emailed Riley, asked him for more resources
He saw it. What next...
